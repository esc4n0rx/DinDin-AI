const moment = require('moment')
const numeral = require('numeral')
const supabaseService = require('../services/supabase')
const llmService = require('../services/llm')
const userConfigService = require('../services/userConfig')
const personalityService = require('../services/personalityResponses')
const reminderService = require('../services/reminderService');
const dashboardService = require('../services/dashboardService');

// Configura o moment para PT-BR
moment.locale('pt-br')

// Define comandos dispon√≠veis
const commands = [
  { command: 'start', description: 'Iniciar o assistente financeiro' },
  { command: 'configurar', description: 'Configurar sua personalidade preferida' },
  { command: 'relatorio', description: 'Ver relat√≥rio financeiro do m√™s' },
  { command: 'hoje', description: 'Ver transa√ß√µes de hoje' },
  { command: 'semana', description: 'Ver transa√ß√µes da semana' },
  { command: 'mes', description: 'Ver transa√ß√µes do m√™s' },
  { command: 'lembretes', description: 'Ver seus lembretes pendentes' },
  { command: 'reset', description: 'Apagar todos os seus dados e come√ßar de novo' },
  { command: 'ajuda', description: 'Mostrar comandos dispon√≠veis' },
  { command: 'dashboard', description: 'Ver dashboard visual das suas finan√ßas' },
  { command: 'grafico_despesas', description: 'Ver gr√°fico de despesas por categoria' },
  { command: 'grafico_receitas', description: 'Ver gr√°fico de receitas por categoria' },
  { command: 'grafico_evolucao', description: 'Ver gr√°fico de evolu√ß√£o financeira' },
  { command: 'visualizar', description: 'Mostrar menu de visualiza√ß√µes e gr√°ficos' },
  { command: 'grafico_comparativo', description: 'Ver comparativo entre receitas e despesas' }
]

// Fun√ß√£o para formatar valores monet√°rios
const formatCurrency = (value) => {
  return `R$ ${numeral(value).format('0,0.00')}`
}

// Estados dos usu√°rios para o processo de configura√ß√£o
const userStates = new Map()

// Fun√ß√£o para criar teclado de personalidades
function createPersonalityKeyboard() {
  return {
    reply_markup: {
      keyboard: [
        [{ text: 'üòä Amig√°vel e Tranquilo' }],
        [{ text: 'üòú Debochado e Engra√ßado' }],
        [{ text: 'üëî Profissional e Conciso' }]
      ],
      one_time_keyboard: true,
      resize_keyboard: true
    }
  }
}

// Handler para o comando /start
// Handler para o comando /start
async function handleStart(bot, msg) {
  const { id: telegramId, first_name, last_name, username } = msg.from
  const chatId = msg.chat.id
  
  try {
    console.log(`Iniciando configura√ß√£o para usu√°rio ${telegramId} (${first_name})`)
    
    // Cadastra o usu√°rio no banco de dados
    const user = await supabaseService.getOrCreateUser(telegramId, first_name, last_name, username)
    
    // Verifica se o usu√°rio j√° completou a configura√ß√£o
    const userConfig = await userConfigService.getUserConfig(user.id)
    
    // For√ßa a exibi√ß√£o do menu de personalidades sempre que /start for chamado
    const forceConfigMenu = msg.text && msg.text.includes('/start')
    
    if (!userConfig.setup_completed || forceConfigMenu) {
      console.log(`Exibindo menu de personalidades para usu√°rio ${telegramId}`)
      
      // Inicia o processo de configura√ß√£o
      await bot.sendMessage(
        chatId, 
        `Ol√°, ${first_name}! Bem-vindo ao *DinDin AI* - seu assistente financeiro inteligente! ü§ñüí∞\n\nAntes de come√ßarmos, vamos personalizar sua experi√™ncia. Como voc√™ prefere que eu me comunique com voc√™?`,
        { 
          parse_mode: 'Markdown',
          ...createPersonalityKeyboard()
        }
      )
      
      // Define o estado do usu√°rio para aguardar a escolha da personalidade
      userStates.set(telegramId, { state: 'awaiting_personality', userId: user.id })
      console.log(`Estado do usu√°rio ${telegramId} definido para: awaiting_personality`)
      
      return
    }
    
    // Se j√° configurou, envia mensagem de boas-vindas normal
    const welcomeMessage = personalityService.getResponse(
      userConfig.personality,
      'introduction',
      first_name
    )
    
    // Configura os comandos para o bot
    await bot.setMyCommands(commands)
    
    // Envia a mensagem de boas-vindas com as instru√ß√µes
    const helpMessage = `
üìã *Comandos Dispon√≠veis:*
/relatorio - Ver relat√≥rio financeiro mensal
/hoje - Ver transa√ß√µes de hoje
/semana - Ver transa√ß√µes da semana
/mes - Ver transa√ß√µes do m√™s
/configurar - Mudar minha personalidade
/reset - Apagar todos os seus dados e come√ßar de novo
/ajuda - Mostrar esta mensagem
    `
    
    // Envia as duas mensagens
    await bot.sendMessage(chatId, welcomeMessage, { parse_mode: 'Markdown' })
    return bot.sendMessage(chatId, helpMessage, { parse_mode: 'Markdown' })
    
  } catch (error) {
    console.error('Error in handleStart:', error)
    return bot.sendMessage(chatId, '‚ùå Ocorreu um erro ao inicializar o assistente.')
  }
}

// Handler para o comando /configurar
async function handleConfigure(bot, msg) {
  const { id: telegramId, first_name } = msg.from
  const chatId = msg.chat.id
  
  try {
    // Obt√©m o usu√°rio
    const user = await supabaseService.getOrCreateUser(telegramId, first_name, msg.from.last_name, msg.from.username)
    
    // Envia mensagem de configura√ß√£o
    await bot.sendMessage(
      chatId, 
      `Vamos personalizar sua experi√™ncia! Como voc√™ prefere que eu me comunique com voc√™?`,
      { 
        parse_mode: 'Markdown',
        ...createPersonalityKeyboard()
      }
    )
    
    // Define o estado do usu√°rio para aguardar a escolha da personalidade
    userStates.set(telegramId, { state: 'awaiting_personality', userId: user.id })
    
  } catch (error) {
    console.error('Error in handleConfigure:', error)
    return bot.sendMessage(chatId, '‚ùå Ocorreu um erro ao iniciar a configura√ß√£o.')
  }
}
// Handler para o comando /reset
async function handleReset(bot, msg) {
  const { id: telegramId, first_name } = msg.from
  const chatId = msg.chat.id
  
  try {
    // Encontrar o usu√°rio pelo ID do telegram
    const { data: existingUser } = await supabaseService.supabase
      .from('users')
      .select('id, telegram_id')
      .eq('telegram_id', telegramId)
      .single()
    
    if (!existingUser) {
      return bot.sendMessage(chatId, 'N√£o encontrei nenhuma configura√ß√£o para voc√™. Use /start para iniciar o bot.');
    }
    
    // Excluir configura√ß√µes do usu√°rio
    await supabaseService.supabase
      .from('user_configs')
      .delete()
      .eq('user_id', existingUser.id)
    
    // Excluir todas as transa√ß√µes do usu√°rio
    await supabaseService.supabase
      .from('transactions')
      .delete()
      .eq('user_id', existingUser.id)
    
    // Opcional: excluir o pr√≥prio usu√°rio
     await supabaseService.supabase
      .from('users')
      .delete()
      .eq('id', existingUser.id)
    
    // Remover estados em mem√≥ria
    if (userStates.has(telegramId)) {
      userStates.delete(telegramId)
    }
    
    // Enviar mensagem de confirma√ß√£o
    await bot.sendMessage(
      chatId, 
      `üóëÔ∏è Todos os seus dados foram resetados com sucesso, ${first_name}!\n\nUtilize /start para configurar o bot novamente.`,
      { parse_mode: 'Markdown' }
    )
    
    // Iniciar novamente o processo de configura√ß√£o
    setTimeout(() => handleStart(bot, msg), 1000)
    
  } catch (error) {
    console.error('Error in handleReset:', error)
    return bot.sendMessage(chatId, '‚ùå Ocorreu um erro ao tentar resetar seus dados. Por favor, tente novamente.')
  }
}


// Handler para processar a escolha de personalidade
async function handlePersonalitySelection(bot, msg) {
  const { id: telegramId, first_name } = msg.from
  const chatId = msg.chat.id
  const text = msg.text
  
  try {
    // Verifica se o usu√°rio est√° no estado de aguardar personalidade
    const userState = userStates.get(telegramId)
    if (!userState || userState.state !== 'awaiting_personality') {
      return handleMessage(bot, msg) // N√£o est√° esperando personalidade, trata como mensagem normal
    }
    
    console.log(`Recebida sele√ß√£o de personalidade: "${text}" do usu√°rio ${telegramId}`)
    
    // Determina qual personalidade foi escolhida
    let personality
    if (text.includes('Amig√°vel') || text.includes('amigavel') || text.includes('Amigavel')) {
      personality = userConfigService.PERSONALITIES.FRIENDLY
    } else if (text.includes('Debochado') || text.includes('debochado') || text.includes('Engra√ßado') || text.includes('engracado')) {
      personality = userConfigService.PERSONALITIES.SASSY
    } else if (text.includes('Profissional') || text.includes('profissional') || text.includes('conciso')) {
      personality = userConfigService.PERSONALITIES.PROFESSIONAL
    } else {
      // Op√ß√£o inv√°lida, pede para escolher novamente
      console.log(`Op√ß√£o de personalidade n√£o reconhecida: "${text}"`)
      return bot.sendMessage(
        chatId,
        'Hmm, n√£o reconheci essa op√ß√£o. Por favor, escolha uma das op√ß√µes abaixo:',
        createPersonalityKeyboard()
      )
    }
    
    console.log(`Personalidade selecionada: ${personality} para usu√°rio ${telegramId}`)
    
    // Salva a configura√ß√£o do usu√°rio
    await userConfigService.saveUserConfig(userState.userId, {
      personality: personality,
      setup_completed: true
    })
    
    // Remove o estado do usu√°rio
    userStates.delete(telegramId)
    
    // Mensagens de confirma√ß√£o com base na personalidade
    let confirmationMessage
    
    if (personality === userConfigService.PERSONALITIES.FRIENDLY) {
      confirmationMessage = `√ìtimo! Vou ser amig√°vel e tranquilo nas nossas conversas. üòä\n\nAgora voc√™ pode come√ßar a registrar suas despesas e receitas. Basta me enviar mensagens como "Almo√ßo 25,90" ou "Recebi sal√°rio 2500".`
    } else if (personality === userConfigService.PERSONALITIES.SASSY) {
      confirmationMessage = `Beleza! Vou ser debochado e engra√ßado, espero que aguente as verdades! üòú\n\nAgora √© s√≥ mandar seus gastos pra eu julgar! Tipo "Fast food 30 pila" ou "Ganhei 100 mangos de b√¥nus".`
    } else {
      confirmationMessage = `Configura√ß√£o conclu√≠da. Utilizarei comunica√ß√£o profissional e concisa. üëî\n\nVoc√™ pode iniciar o registro de suas transa√ß√µes financeiras agora. Exemplos: "Refei√ß√£o corporativa 35,00" ou "Honor√°rios recebidos 3000,00".`
    }
    
    // Mensagem de ajuda
    const helpMessage = `
üìã *Comandos Dispon√≠veis:*
/relatorio - Ver relat√≥rio financeiro mensal
/hoje - Ver transa√ß√µes de hoje
/semana - Ver transa√ß√µes da semana
/mes - Ver transa√ß√µes do m√™s
/configurar - Mudar minha personalidade
/ajuda - Mostrar esta mensagem
`

    // Envia as mensagens de confirma√ß√£o e ajuda
    await bot.sendMessage(chatId, confirmationMessage, { parse_mode: 'Markdown' })
    return bot.sendMessage(chatId, helpMessage, { parse_mode: 'Markdown' })
    
  } catch (error) {
    console.error('Error in handlePersonalitySelection:', error)
    return bot.sendMessage(chatId, '‚ùå Ocorreu um erro ao salvar sua prefer√™ncia. Por favor, tente novamente com /configurar.')
  }
}

// Handler para o comando /ajuda
async function handleHelp(bot, msg) {
  const helpMessage = `
üìã *Comandos Dispon√≠veis:*

*Principais Comandos:*
/relatorio - Ver relat√≥rio financeiro mensal
/hoje - Ver transa√ß√µes de hoje
/semana - Ver transa√ß√µes da semana
/mes - Ver transa√ß√µes do m√™s
/lembretes - Ver seus lembretes pendentes
/configurar - Mudar minha personalidade
/ajuda - Mostrar esta mensagem

*Comandos de Dashboard Visual:*
/dashboard - Ver dashboard completo com todos os gr√°ficos
/grafico_despesas - Ver gr√°fico de despesas por categoria
/grafico_receitas - Ver gr√°fico de receitas por categoria
/grafico_evolucao - Ver gr√°fico de evolu√ß√£o do saldo
/grafico_comparativo - Ver comparativo entre receitas e despesas

‚úèÔ∏è *Como usar:*
‚Ä¢ *Para registrar transa√ß√µes*: Ex. "Almo√ßo 25,90" ou "Recebi 100 de presente"
‚Ä¢ *Para criar lembretes*: Ex. "Me lembre de pagar a conta de luz dia 10" 
  `;
  
  return bot.sendMessage(msg.chat.id, helpMessage, { parse_mode: 'Markdown' });
}

// Handler para processar mensagens normais (potenciais transa√ß√µes)
// Handler para processar mensagens normais (potenciais transa√ß√µes)
async function handleMessage(bot, msg) {
  const { id: telegramId, first_name } = msg.from
  const chatId = msg.chat.id
  const userMsg = msg.text
  
  // Verifica se o usu√°rio est√° em um processo de configura√ß√£o
  const userState = userStates.get(telegramId)
  if (userState) {
    // Se estiver aguardando personalidade, processa a escolha
    if (userState.state === 'awaiting_personality') {
      console.log(`Usu√°rio ${telegramId} est√° em estado de escolha de personalidade, redirecionando para handlePersonalitySelection`)
      return handlePersonalitySelection(bot, msg)
    }
  }
  
  try {
    // Verifica se √© uma op√ß√£o de personalidade mesmo sem estar no estado
    if (userMsg.includes('Amig√°vel') || userMsg.includes('Debochado') || userMsg.includes('Profissional')) {
      console.log(`Detectada poss√≠vel escolha de personalidade "${userMsg}" fora do estado`)
      
      // Obt√©m o usu√°rio
      const user = await supabaseService.getOrCreateUser(telegramId, first_name, msg.from.last_name, msg.from.username)
      
      // Cria um estado tempor√°rio
      userStates.set(telegramId, { state: 'awaiting_personality', userId: user.id })
      
      // Processa como escolha de personalidade
      return handlePersonalitySelection(bot, msg)
    }
    
    // Obter ou criar usu√°rio
    const user = await supabaseService.getOrCreateUser(telegramId, first_name, msg.from.last_name, msg.from.username)
    
    // Obt√©m a configura√ß√£o do usu√°rio
    const userConfig = await userConfigService.getUserConfig(user.id)
    
    // Se o usu√°rio n√£o finalizou a configura√ß√£o, inicia o processo
    if (!userConfig.setup_completed) {
      console.log(`Usu√°rio ${telegramId} n√£o finalizou a configura√ß√£o, iniciando setup`)
      return handleStart(bot, msg)
    }
    
    // Analisa a mensagem com o LLM
    const analysis = await llmService.analyzeMessage(userMsg)

    if (analysis.isReminder) {
      return handleReminderCreation(bot, msg, user, userConfig, analysis);
    }
    
    // Se n√£o for uma transa√ß√£o, responde com uma mensagem personalizada
    if (!analysis.isTransaction) {
      const notTransactionMessage = personalityService.getResponse(
        userConfig.personality,
        'notTransaction'
      )
      return bot.sendMessage(chatId, notTransactionMessage, { parse_mode: 'Markdown' })
    }
    
    // Processa a transa√ß√£o
    const { type, amount, description, category, date } = analysis
    
    // Encontra a categoria no banco de dados
    const categoryData = await supabaseService.getCategoryByName(category, type)

    const currentDate = new Date();
    
    // Cria a transa√ß√£o
    const transaction = await supabaseService.createTransaction(
      user.id,
      categoryData.id,
      amount,
      description,
      type,
      currentDate
    )
    
    // Personaliza a mensagem de confirma√ß√£o com base no tipo e personalidade
    let confirmationMessage
    
    if (type === 'income') {
      confirmationMessage = personalityService.getResponse(
        userConfig.personality,
        'incomeConfirmation',
        transaction,
        categoryData
      )
    } else {
      confirmationMessage = personalityService.getResponse(
        userConfig.personality,
        'expenseConfirmation',
        transaction,
        categoryData
      )
    }
    
    // Adiciona a data formatada ao final da mensagem
    const dateFormatted = moment(transaction.transaction_date).format('DD/MM/YYYY')
    confirmationMessage += `\nüìÖ *Data:* ${dateFormatted}`
    
    return bot.sendMessage(chatId, confirmationMessage, { parse_mode: 'Markdown' })
  } catch (error) {
    console.error('Error in handleMessage:', error)
    return bot.sendMessage(chatId, '‚ùå Ocorreu um erro ao processar sua mensagem.')
  }
}

// Handler para gerar relat√≥rios
async function handleReport(bot, msg, periodType) {
  const { id: telegramId } = msg.from
  const chatId = msg.chat.id
  
  try {
    // Obter usu√°rio
    const user = await supabaseService.getOrCreateUser(telegramId, msg.from.first_name, msg.from.last_name, msg.from.username)
    
    // Obter configura√ß√£o do usu√°rio
    const userConfig = await userConfigService.getUserConfig(user.id)
    
    // Definir per√≠odo do relat√≥rio
    let startDate, endDate, periodTitle
    const now = new Date()
    
    switch (periodType) {
      case 'day':
        startDate = moment(now).startOf('day').toISOString()
        endDate = moment(now).endOf('day').toISOString()
        periodTitle = `Hoje (${moment(now).format('DD/MM/YYYY')})`
        break
      case 'week':
        startDate = moment(now).startOf('week').toISOString()
        endDate = moment(now).endOf('week').toISOString()
        periodTitle = `Semana (${moment(now).startOf('week').format('DD/MM')} - ${moment(now).endOf('week').format('DD/MM')})`
        break
      case 'month':
      default:
        startDate = moment(now).startOf('month').toISOString()
        endDate = moment(now).endOf('month').toISOString()
        periodTitle = `M√™s de ${moment(now).format('MMMM/YYYY')}`
        break
    }
    
    // Obter resumo financeiro
    const summary = await supabaseService.getSummary(user.id, startDate, endDate)
    
    // Obter transa√ß√µes do per√≠odo
    const transactions = await supabaseService.getUserTransactions(user.id, startDate, endDate)
    
    // Preparar mensagem de relat√≥rio
    let reportMessage = `
üìä *Relat√≥rio Financeiro - ${periodTitle}*

üí∞ *Receitas:* ${formatCurrency(summary.income)}
üí∏ *Despesas:* ${formatCurrency(summary.expense)}
üè¶ *Saldo:* ${formatCurrency(summary.balance)}
`
    
    // Adicionar coment√°rio personalizado sobre sa√∫de financeira
    const healthComment = personalityService.getResponse(
      userConfig.personality,
      'financialHealthComment',
      summary.income,
      summary.expense,
      summary.balance
    )
    
    reportMessage += `\n${healthComment}`
    
    // Adiciona detalhamento por categoria se houver transa√ß√µes
    if (transactions.length > 0) {
      reportMessage += `\n\nüìã *Detalhamento por Categoria:*\n`
      
      // Separar categorias por tipo
      const expenseCategories = []
      const incomeCategories = []
      
      Object.entries(summary.categories).forEach(([name, data]) => {
        if (data.type === 'expense') {
          expenseCategories.push({ name, total: data.total, icon: data.icon })
        } else {
          incomeCategories.push({ name, total: data.total, icon: data.icon })
        }
      })
      
      // Ordenar por valor (maior para menor)
      expenseCategories.sort((a, b) => b.total - a.total)
      incomeCategories.sort((a, b) => b.total - a.total)
      
      // Adicionar categorias de despesa
      if (expenseCategories.length > 0) {
        reportMessage += `\nüí∏ *Despesas:*\n`
        expenseCategories.forEach(cat => {
          reportMessage += `${cat.icon} ${cat.name}: ${formatCurrency(cat.total)}\n`
        })
        
        // Verifica se h√° alguma categoria com gasto elevado para comentar
        if (expenseCategories.length > 0 && summary.expense > 0) {
          const highestCategory = expenseCategories[0]
          const comment = personalityService.getResponse(
            userConfig.personality,
            'highSpendingComment',
            highestCategory.name,
            highestCategory.total,
            summary.expense
          )
          
          if (comment) {
            reportMessage += `\n${comment}\n`
          }
        }
      }
      
      // Adicionar categorias de receita
      if (incomeCategories.length > 0) {
        reportMessage += `\nüí∞ *Receitas:*\n`
        incomeCategories.forEach(cat => {
          reportMessage += `${cat.icon} ${cat.name}: ${formatCurrency(cat.total)}\n`
        })
      }
      
      // Adiciona √∫ltimas transa√ß√µes (m√°ximo 10)
      const recentTransactions = transactions.slice(0, 10)
      
      if (recentTransactions.length > 0) {
        reportMessage += `\n\nüìù *√öltimas Transa√ß√µes:*\n`
        recentTransactions.forEach(tx => {
          const emoji = tx.type === 'income' ? 'üí∞' : 'üí∏'
          const date = moment(tx.transaction_date).format('DD/MM')
          const category = tx.categories?.name || 'Sem categoria'
          const categoryIcon = tx.categories?.icon || ''
          
          reportMessage += `${emoji} ${date} - ${categoryIcon} ${tx.description}: ${formatCurrency(tx.amount)}\n`
        })
      }
    } else {
      reportMessage += `\n\nüì≠ N√£o h√° transa√ß√µes registradas neste per√≠odo.`
    }
    
    // Adiciona dica personalizada ao final
    const tip = personalityService.getResponse(
      userConfig.personality,
      'randomTip'
    )
    
    reportMessage += `\n\n${tip}`
    
    return bot.sendMessage(chatId, reportMessage, { parse_mode: 'Markdown' })
  } catch (error) {
    console.error(`Error in handleReport (${periodType}):`, error)
    return bot.sendMessage(chatId, '‚ùå Ocorreu um erro ao gerar o relat√≥rio.')
  }
}


// Vers√£o simplificada da fun√ß√£o handleReminderCreation em handlers/telegramHandlers.js

async function handleReminderCreation(bot, msg, user, userConfig, analysis) {
  const chatId = msg.chat.id;
  
  try {
    console.log('Processando cria√ß√£o de lembrete:', analysis);
    
    // Extrair informa√ß√µes do lembrete
    const { description, dueDate, dueTime, isRecurring, recurrencePattern } = analysis;
    
    // Combinar data e hora para criar o objeto de data
    // Garantindo que temos valores v√°lidos (o LLM j√° deve ter usado a data atual do servidor)
    const dueDateStr = dueDate || new Date().toISOString().split('T')[0];
    const dueTimeStr = dueTime || '09:00';
    
    // Criar o objeto de data
    const dueDateObj = new Date(`${dueDateStr}T${dueTimeStr}`);
    console.log(`Data do lembrete: ${dueDateObj.toISOString()}`);
    
    // Verificar se a data √© v√°lida
    if (isNaN(dueDateObj.getTime())) {
      console.error(`Data inv√°lida criada: ${dueDateStr}T${dueTimeStr}`);
      return bot.sendMessage(
        chatId,
        '‚ùå N√£o consegui entender a data do lembrete. Por favor, tente novamente com uma data mais clara.',
        { parse_mode: 'Markdown' }
      );
    }
    
    // Criar o lembrete no banco de dados
    const reminder = await reminderService.createReminder(
      user.id,
      description,
      dueDateObj,
      isRecurring || false,
      recurrencePattern
    );
    
    // Preparar a mensagem de confirma√ß√£o
    const dateFormatted = moment(dueDateObj).format('DD/MM/YYYY [√†s] HH:mm');
    const recurrenceText = isRecurring 
      ? `\n‚è∞ Repeti√ß√£o: ${getRecurrenceText(recurrencePattern)}` 
      : '';
    
    // Personalizar a resposta com base na personalidade do usu√°rio
    const reminderForResponse = {
      description,
      dueDate: dueDateObj
    };
    
    const confirmationMessage = personalityService.getResponse(
      userConfig.personality,
      'reminderCreated',
      reminderForResponse
    ) + recurrenceText;
    
    return bot.sendMessage(chatId, confirmationMessage, { parse_mode: 'Markdown' });
  } catch (error) {
    console.error('Error creating reminder:', error);
    return bot.sendMessage(chatId, '‚ùå Ocorreu um erro ao criar o lembrete. Por favor, tente novamente.');
  }
}

// Fun√ß√£o auxiliar para formatar o texto de recorr√™ncia
function getRecurrenceText(pattern) {
  switch (pattern) {
    case 'daily':
      return 'Di√°ria';
    case 'weekly':
      return 'Semanal';
    case 'monthly':
      return 'Mensal';
    case 'yearly':
      return 'Anual';
    default:
      return pattern;
  }
}

// Novo comando para listar lembretes
async function handleListReminders(bot, msg) {
  const { id: telegramId } = msg.from;
  const chatId = msg.chat.id;
  
  try {
    // Obter usu√°rio
    const user = await supabaseService.getOrCreateUser(telegramId, msg.from.first_name, msg.from.last_name, msg.from.username);
    
    // Obter lembretes do usu√°rio
    const reminders = await reminderService.getUserReminders(user.id);
    
    if (reminders.length === 0) {
      return bot.sendMessage(chatId, 'üìù Voc√™ n√£o tem lembretes pendentes.');
    }
    
    // Agrupar lembretes por data
    const remindersByDate = {};
    
    reminders.forEach(reminder => {
      const date = moment(reminder.due_date).format('DD/MM/YYYY');
      
      if (!remindersByDate[date]) {
        remindersByDate[date] = [];
      }
      
      remindersByDate[date].push(reminder);
    });
    
    // Construir a mensagem
    let message = 'üìù *Seus Lembretes Pendentes*\n\n';
    
    Object.keys(remindersByDate).sort().forEach(date => {
      message += `üìÖ *${date}*\n`;
      
      remindersByDate[date].forEach(reminder => {
        const time = moment(reminder.due_date).format('HH:mm');
        const recurringIcon = reminder.is_recurring ? 'üîÑ ' : '';
        
        message += `  ‚Ä¢ ${recurringIcon}${time} - ${reminder.description}\n`;
      });
      
      message += '\n';
    });
    
    message += 'Para marcar um lembrete como conclu√≠do, envie "concluir lembrete X" ou "completar lembrete X".';
    
    return bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
  } catch (error) {
    console.error('Error listing reminders:', error);
    return bot.sendMessage(chatId, '‚ùå Ocorreu um erro ao listar seus lembretes.');
  }
}

/**
 * Handler para o comando /dashboard
 * Gera e envia todos os gr√°ficos do dashboard
 */
async function handleDashboard(bot, msg, periodType = 'month') {
  const { id: telegramId } = msg.from;
  const chatId = msg.chat.id;
  
  try {
    // Enviar mensagem de que est√° processando
    const loadingMessage = await bot.sendMessage(
      chatId,
      'üìä Gerando seu dashboard financeiro. Isso pode levar alguns segundos...',
      { parse_mode: 'Markdown' }
    );
    
    // Obter usu√°rio
    const user = await supabaseService.getOrCreateUser(telegramId, msg.from.first_name, msg.from.last_name, msg.from.username);
    
    // Definir per√≠odo do relat√≥rio
    let startDate, endDate, periodTitle;
    const now = new Date();
    
    switch (periodType) {
      case 'day':
        startDate = moment(now).startOf('day').toISOString();
        endDate = moment(now).endOf('day').toISOString();
        periodTitle = `Hoje (${moment(now).format('DD/MM/YYYY')})`;
        break;
      case 'week':
        startDate = moment(now).startOf('week').toISOString();
        endDate = moment(now).endOf('week').toISOString();
        periodTitle = `Semana (${moment(now).startOf('week').format('DD/MM')} - ${moment(now).endOf('week').format('DD/MM')})`;
        break;
      case 'month':
      default:
        startDate = moment(now).startOf('month').toISOString();
        endDate = moment(now).endOf('month').toISOString();
        periodTitle = `M√™s de ${moment(now).format('MMMM/YYYY')}`;
        break;
    }
    
    // Gera todos os gr√°ficos
    const dashboard = await dashboardService.generateDashboard(user.id, startDate, endDate);
    
    // Edita a mensagem de carregamento para remover a espera
    await bot.editMessageText(
      `üìä *Dashboard Financeiro - ${periodTitle}*\n\nAqui est√£o os gr√°ficos da sua situa√ß√£o financeira:`,
      {
        chat_id: chatId,
        message_id: loadingMessage.message_id,
        parse_mode: 'Markdown'
      }
    );
    
    // Envia os gr√°ficos com legendas apropriadas
    await bot.sendPhoto(chatId, dashboard.expenseDistribution, {
      caption: 'üìâ Distribui√ß√£o de Despesas por Categoria'
    });
    
    await bot.sendPhoto(chatId, dashboard.incomeDistribution, {
      caption: 'üìà Distribui√ß√£o de Receitas por Categoria'
    });
    
    await bot.sendPhoto(chatId, dashboard.expenseTimeSeries, {
      caption: 'üìä Evolu√ß√£o das Despesas ao Longo do Tempo'
    });
    
    await bot.sendPhoto(chatId, dashboard.incomeExpenseComparison, {
      caption: 'üìä Comparativo entre Receitas e Despesas'
    });
    
    await bot.sendPhoto(chatId, dashboard.balanceEvolution, {
      caption: 'üìä Evolu√ß√£o do seu Saldo'
    });
    
    // Adiciona bot√µes para diferentes per√≠odos
    const periodKeyboard = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'Hoje', callback_data: 'dashboard_day' },
            { text: 'Semana', callback_data: 'dashboard_week' },
            { text: 'M√™s', callback_data: 'dashboard_month' }
          ]
        ]
      }
    };
    
    await bot.sendMessage(
      chatId,
      'Voc√™ pode visualizar seu dashboard para diferentes per√≠odos:',
      periodKeyboard
    );
    
  } catch (error) {
    console.error(`Error in handleDashboard (${periodType}):`, error);
    return bot.sendMessage(chatId, '‚ùå Ocorreu um erro ao gerar o dashboard. Talvez voc√™ ainda n√£o tenha transa√ß√µes suficientes neste per√≠odo.');
  }
}

/**
 * Handler para o comando /grafico_despesas
 * Gera e envia o gr√°fico de distribui√ß√£o de despesas por categoria
 */
async function handleExpenseChart(bot, msg, periodType = 'month') {
  const { id: telegramId } = msg.from;
  const chatId = msg.chat.id;
  
  try {
    // Enviar mensagem de que est√° processando
    const loadingMessage = await bot.sendMessage(
      chatId,
      'üìä Gerando gr√°fico de despesas. Um momento...',
      { parse_mode: 'Markdown' }
    );
    
    // Obter usu√°rio
    const user = await supabaseService.getOrCreateUser(telegramId, msg.from.first_name, msg.from.last_name, msg.from.username);
    
    // Definir per√≠odo do relat√≥rio
    let startDate, endDate, periodTitle;
    const now = new Date();
    
    switch (periodType) {
      case 'day':
        startDate = moment(now).startOf('day').toISOString();
        endDate = moment(now).endOf('day').toISOString();
        periodTitle = `Hoje (${moment(now).format('DD/MM/YYYY')})`;
        break;
      case 'week':
        startDate = moment(now).startOf('week').toISOString();
        endDate = moment(now).endOf('week').toISOString();
        periodTitle = `Semana (${moment(now).startOf('week').format('DD/MM')} - ${moment(now).endOf('week').format('DD/MM')})`;
        break;
      case 'month':
      default:
        startDate = moment(now).startOf('month').toISOString();
        endDate = moment(now).endOf('month').toISOString();
        periodTitle = `M√™s de ${moment(now).format('MMMM/YYYY')}`;
        break;
    }
    
    // Gera o gr√°fico
    const chartPath = await dashboardService.generateCategoryDistributionChart(user.id, startDate, endDate, 'expense');
    
    // Remove a mensagem de carregamento
    await bot.deleteMessage(chatId, loadingMessage.message_id);
    
    // Envia o gr√°fico
    await bot.sendPhoto(chatId, chartPath, {
      caption: `üìâ Distribui√ß√£o de Despesas por Categoria - ${periodTitle}`
    });
    
    // Adiciona bot√µes para diferentes per√≠odos
    const periodKeyboard = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'Hoje', callback_data: 'expense_chart_day' },
            { text: 'Semana', callback_data: 'expense_chart_week' },
            { text: 'M√™s', callback_data: 'expense_chart_month' }
          ]
        ]
      }
    };
    
    await bot.sendMessage(
      chatId,
      'Voc√™ pode visualizar este gr√°fico para diferentes per√≠odos:',
      periodKeyboard
    );
    
  } catch (error) {
    console.error(`Error in handleExpenseChart (${periodType}):`, error);
    return bot.sendMessage(chatId, '‚ùå Ocorreu um erro ao gerar o gr√°fico. Talvez voc√™ ainda n√£o tenha despesas neste per√≠odo.');
  }
}

async function handleIncomeChart(bot, msg, periodType = 'month') {
  const { id: telegramId } = msg.from;
  const chatId = msg.chat.id;
  
  try {
    // Enviar mensagem de que est√° processando
    const loadingMessage = await bot.sendMessage(
      chatId,
      'üìä Gerando gr√°fico de receitas. Um momento...',
      { parse_mode: 'Markdown' }

    );
    
    // Obter usu√°rio
    const user = await supabaseService.getOrCreateUser(telegramId, msg.from.first_name, msg.from.last_name, msg.from.username);
    
    // Definir per√≠odo do relat√≥rio
    let startDate, endDate, periodTitle;
    const now = new Date();
    
    switch (periodType) {
      case 'day':
        startDate = moment(now).startOf('day').toISOString();
        endDate = moment(now).endOf('day').toISOString();
        periodTitle = `Hoje (${moment(now).format('DD/MM/YYYY')})`;
        break;
      case 'week':
        startDate = moment(now).startOf('week').toISOString();
        endDate = moment(now).endOf('week').toISOString();
        periodTitle = `Semana (${moment(now).startOf('week').format('DD/MM')} - ${moment(now).endOf('week').format('DD/MM')})`;
        break;
      case 'month':
      default:
        startDate = moment(now).startOf('month').toISOString();
        endDate = moment(now).endOf('month').toISOString();
        periodTitle = `M√™s de ${moment(now).format('MMMM/YYYY')}`;
        break;
    }
    
    // Gera o gr√°fico
    const chartPath = await dashboardService.generateCategoryDistributionChart(user.id, startDate, endDate, 'income');
    
    // Remove a mensagem de carregamento
    await bot.deleteMessage(chatId, loadingMessage.message_id);
    
    // Envia o gr√°fico
    await bot.sendPhoto(chatId, chartPath, {
      caption: `üìà Distribui√ß√£o de Receitas por Categoria - ${periodTitle}`
    });
    
    // Adiciona bot√µes para diferentes per√≠odos
    const periodKeyboard = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'Hoje', callback_data: 'income_chart_day' },
            { text: 'Semana', callback_data: 'income_chart_week' },
            { text: 'M√™s', callback_data: 'income_chart_month' }
          ]
        ]
      }
    };
    
    await bot.sendMessage(
      chatId,
      'Voc√™ pode visualizar este gr√°fico para diferentes per√≠odos:',
      periodKeyboard
    );
    
  } catch (error) {
    console.error(`Error in handleIncomeChart (${periodType}):`, error);
    return bot.sendMessage(chatId, '‚ùå Ocorreu um erro ao gerar o gr√°fico. Talvez voc√™ ainda n√£o tenha receitas neste per√≠odo.');
  }
}

/**
 * Handler para o comando /grafico_evolucao
 * Gera e envia o gr√°fico de evolu√ß√£o do saldo
 */
async function handleBalanceEvolutionChart(bot, msg, periodType = 'month') {
  const { id: telegramId } = msg.from;
  const chatId = msg.chat.id;
  
  try {
    // Enviar mensagem de que est√° processando
    const loadingMessage = await bot.sendMessage(
      chatId,
      'üìä Gerando gr√°fico de evolu√ß√£o do saldo. Um momento...',
      { parse_mode: 'Markdown' }
    );
    
    // Obter usu√°rio
    const user = await supabaseService.getOrCreateUser(telegramId, msg.from.first_name, msg.from.last_name, msg.from.username);
    
    // Definir per√≠odo do relat√≥rio
    let startDate, endDate, periodTitle;
    const now = new Date();
    
    switch (periodType) {
      case 'day':
        startDate = moment(now).startOf('day').toISOString();
        endDate = moment(now).endOf('day').toISOString();
        periodTitle = `Hoje (${moment(now).format('DD/MM/YYYY')})`;
        break;
      case 'week':
        startDate = moment(now).startOf('week').toISOString();
        endDate = moment(now).endOf('week').toISOString();
        periodTitle = `Semana (${moment(now).startOf('week').format('DD/MM')} - ${moment(now).endOf('week').format('DD/MM')})`;
        break;
      case 'month':
      default:
        startDate = moment(now).startOf('month').toISOString();
        endDate = moment(now).endOf('month').toISOString();
        periodTitle = `M√™s de ${moment(now).format('MMMM/YYYY')}`;
        break;
    }
    
    // Gera o gr√°fico
    const chartPath = await dashboardService.generateBalanceEvolutionChart(user.id, startDate, endDate);
    
    // Remove a mensagem de carregamento
    await bot.deleteMessage(chatId, loadingMessage.message_id);
    
    // Envia o gr√°fico
    await bot.sendPhoto(chatId, chartPath, {
      caption: `üìä Evolu√ß√£o do Saldo - ${periodTitle}`
    });
    
    // Adiciona bot√µes para diferentes per√≠odos
    const periodKeyboard = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'Hoje', callback_data: 'balance_chart_day' },
            { text: 'Semana', callback_data: 'balance_chart_week' },
            { text: 'M√™s', callback_data: 'balance_chart_month' }
          ]
        ]
      }
    };
    
    await bot.sendMessage(
      chatId,
      'Voc√™ pode visualizar este gr√°fico para diferentes per√≠odos:',
      periodKeyboard
    );
    
  } catch (error) {
    console.error(`Error in handleBalanceEvolutionChart (${periodType}):`, error);
    return bot.sendMessage(chatId, '‚ùå Ocorreu um erro ao gerar o gr√°fico. Talvez voc√™ ainda n√£o tenha transa√ß√µes suficientes neste per√≠odo.');
  }
}

/**
 * Handler para o comando /grafico_comparativo
 * Gera e envia o gr√°fico comparativo de receitas e despesas
 */
async function handleComparisonChart(bot, msg, periodType = 'month') {
  const { id: telegramId } = msg.from;
  const chatId = msg.chat.id;
  
  try {
    // Enviar mensagem de que est√° processando
    const loadingMessage = await bot.sendMessage(
      chatId,
      'üìä Gerando gr√°fico comparativo. Um momento...',
      { parse_mode: 'Markdown' }
    );
    
    // Obter usu√°rio
    const user = await supabaseService.getOrCreateUser(telegramId, msg.from.first_name, msg.from.last_name, msg.from.username);
    
    // Definir per√≠odo do relat√≥rio
    let startDate, endDate, periodTitle;
    const now = new Date();
    
    switch (periodType) {
      case 'day':
        startDate = moment(now).startOf('day').toISOString();
        endDate = moment(now).endOf('day').toISOString();
        periodTitle = `Hoje (${moment(now).format('DD/MM/YYYY')})`;
        break;
      case 'week':
        startDate = moment(now).startOf('week').toISOString();
        endDate = moment(now).endOf('week').toISOString();
        periodTitle = `Semana (${moment(now).startOf('week').format('DD/MM')} - ${moment(now).endOf('week').format('DD/MM')})`;
        break;
      case 'month':
      default:
        startDate = moment(now).startOf('month').toISOString();
        endDate = moment(now).endOf('month').toISOString();
        periodTitle = `M√™s de ${moment(now).format('MMMM/YYYY')}`;
        break;
    }
    
    // Gera o gr√°fico
    const chartPath = await dashboardService.generateIncomeExpenseComparisonChart(user.id, startDate, endDate);
    
    // Remove a mensagem de carregamento
    await bot.deleteMessage(chatId, loadingMessage.message_id);
    
    // Envia o gr√°fico
    await bot.sendPhoto(chatId, chartPath, {
      caption: `üìä Comparativo entre Receitas e Despesas - ${periodTitle}`
    });
    
    // Adiciona bot√µes para diferentes per√≠odos
    const periodKeyboard = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'Hoje', callback_data: 'comparison_chart_day' },
            { text: 'Semana', callback_data: 'comparison_chart_week' },
            { text: 'M√™s', callback_data: 'comparison_chart_month' }
          ]
        ]
      }
    };
    
    await bot.sendMessage(
      chatId,
      'Voc√™ pode visualizar este gr√°fico para diferentes per√≠odos:',
      periodKeyboard
    );
    
  } catch (error) {
    console.error(`Error in handleComparisonChart (${periodType}):`, error);
    return bot.sendMessage(chatId, '‚ùå Ocorreu um erro ao gerar o gr√°fico. Talvez voc√™ ainda n√£o tenha transa√ß√µes suficientes neste per√≠odo.');
  }
}

/**
 * Handler para os callbacks dos bot√µes de per√≠odo do dashboard
 */
async function handleDashboardCallbacks(bot, callbackQuery) {
  try {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;
    
    // Responde ao callback para remover o loading
    await bot.answerCallbackQuery(callbackQuery.id);
    
    if (data.startsWith('dashboard_')) {
      const period = data.split('_')[1]; // day, week, month
      await handleDashboard(bot, callbackQuery.message, period);
    } 
    else if (data.startsWith('expense_chart_')) {
      const period = data.split('_')[2]; // day, week, month
      await handleExpenseChart(bot, callbackQuery.message, period);
    }
    else if (data.startsWith('income_chart_')) {
      const period = data.split('_')[2]; // day, week, month
      await handleIncomeChart(bot, callbackQuery.message, period);
    }
    else if (data.startsWith('balance_chart_')) {
      const period = data.split('_')[2]; // day, week, month
      await handleBalanceEvolutionChart(bot, callbackQuery.message, period);
    }
    else if (data.startsWith('comparison_chart_')) {
      const period = data.split('_')[2]; // day, week, month
      await handleComparisonChart(bot, callbackQuery.message, period);
    }
  } catch (error) {
    console.error('Error in handleDashboardCallbacks:', error);
    await bot.sendMessage(callbackQuery.message.chat.id, '‚ùå Ocorreu um erro ao processar sua solicita√ß√£o.');
  }
}


/**
 * Mostra um menu interativo com op√ß√µes de gr√°ficos
 * @param {TelegramBot} bot - Inst√¢ncia do bot do Telegram
 * @param {Object} msg - Objeto da mensagem do Telegram
 */
async function handleDashboardMenu(bot, msg) {
  const chatId = msg.chat.id;
  
  try {
    // Obter configura√ß√£o do usu√°rio
    const { id: telegramId } = msg.from;
    const user = await supabaseService.getOrCreateUser(telegramId, msg.from.first_name, msg.from.last_name, msg.from.username);
    const userConfig = await userConfigService.getUserConfig(user.id);
    
    // Mensagem personalizada com base na personalidade
    let message;
    
    if (userConfig.personality === PERSONALITIES.FRIENDLY) {
      message = 'üìä *Menu de Visualiza√ß√µes*\n\nOl√°! Escolha o tipo de visualiza√ß√£o que voc√™ gostaria de ver:';
    } else if (userConfig.personality === PERSONALITIES.SASSY) {
      message = 'üìä *Hora de ver onde o dinheiro foi parar*\n\nVamos l√°, escolha qual gr√°fico voc√™ quer ver (prepare-se para poss√≠veis sustos):';
    } else {
      message = 'üìä *Dashboard Financeiro*\n\nSelecione o tipo de visualiza√ß√£o desejada:';
    }
    
    // Criar teclado inline com bot√µes para os diferentes tipos de gr√°ficos
    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üìä Dashboard Completo', callback_data: 'dashboard_month' }
          ],
          [
            { text: 'üí∏ Despesas por Categoria', callback_data: 'expense_chart_month' }
          ],
          [
            { text: 'üí∞ Receitas por Categoria', callback_data: 'income_chart_month' }
          ],
          [
            { text: 'üìà Evolu√ß√£o do Saldo', callback_data: 'balance_chart_month' }
          ],
          [
            { text: 'üìä Comparativo Receitas x Despesas', callback_data: 'comparison_chart_month' }
          ]
        ]
      }
    };
    
    // Enviar mensagem com o teclado
    await bot.sendMessage(chatId, message, { 
      parse_mode: 'Markdown',
      ...keyboard
    });
    
  } catch (error) {
    console.error('Error in handleDashboardMenu:', error);
    return bot.sendMessage(chatId, '‚ùå Ocorreu um erro ao exibir o menu de dashboard.');
  }
}



// Exporta os handlers
module.exports = {
  commands,
  handleStart,
  handleHelp,
  handleConfigure,
  handlePersonalitySelection,
  handleMessage,
  handleReport,
  handleReset,
  handleListReminders,
  createPersonalityKeyboard,
  handleDashboard,
  handleExpenseChart,
  handleIncomeChart,
  handleBalanceEvolutionChart,
  handleComparisonChart,
  handleDashboardCallbacks
}